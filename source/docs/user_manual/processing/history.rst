|updatedisclaimer|

.. _`processing.history`:

The history manager
============================

The processing history
------------------------

Every time you execute an algorithm, information about the process is
stored in the history manager. Along with the parameters used, the date
and time of the execution are also saved.

This way, it is easy to track and control all the work that has been developed
using the processing framework, and easily reproduce it.

The history manager is a set of registry entries grouped according to
their date of execution, making it easier to find information about an algorithm
executed at any particular moment.

.. _figure_history_1:

.. only:: html

   **Figure Processing 30:**

.. figure:: /static/user_manual/processing/history.png
   :align: center

   History |win|

Process information is kept as a command-line expression, even if the algorithm
was launched from the toolbox. This makes it also useful for those learning how
to use the command-line interface, since they can call an algorithm using the
toolbox and then check the history manager to see how that same algorithm could
be called from the command line.

Apart from browsing the entries in the registry, you can also re-execute processes by
simply double-clicking on the corresponding entry.

Along with recording algorithm executions, the processing framework communicates with the user by means of the
other groups of the registry, namely :guilabel:`Errors`, :guilabel:`Warnings` and
:guilabel:`Information`. In case something is not working properly, having a look
at the :guilabel:`Errors` might help you to see what is happening. If you get in
contact with a developer to report a bug or error, the information in
that group will be very useful for her or him to find out what is going wrong.

Third-party algorithms are usually executed by calling their
command-line interfaces, which communicate with the user via the console.
Although that console is not shown, a full dump of it is stored in the
:guilabel:`Information` group each time you run one of those algorithms. If, for
instance, you are having problems executing a SAGA algorithm, look for an entry
named 'SAGA execution console output' to check all the messages generated by SAGA
and try to find out where the problem is.

Some algorithms, even if they can produce a result with the given input data,
might add comments or additional information to the :guilabel:`Warning` block if
they detect potential problems with the data, in order to warn you.
Make sure you check those messages if you are having unexpected results.
