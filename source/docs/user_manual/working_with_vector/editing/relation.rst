|updatedisclaimer|

.. index:: Relations
.. _vector_relations:

********************************
 Creating one to many relations
********************************

Relations are a technique often used in databases. The concept is, that
features (rows) of different layers (tables) can belong to each other.

As an example you have a layer with all regions of alaska (polygon)
which provides some attributes about its name and region type and a
unique id (which acts as primary key).

Foreign keys
============

Then you get another point layer or table with information about airports
that are located in the regions and you also want to keep track of these. If
you want to add them to the region layer, you need to create a one to many
relation using foreign keys, because there are several airports in most regions.

.. _figure_relations_1:

.. only:: html

   **Figure Relations 1:**

.. figure:: /static/user_manual/working_with_vector/relations1.png
   :align: center

   Alaska region with airports |nix|

In addition to the already existing attributes in the airports attribute table
another field fk_region which acts as a foreign key (if you have a database, you will
probably want to define a constraint on it).

This field fk_region will always contain an id of a region. It can be seen
like a pointer to the region it belongs to. And you can design a custom edit
form for the editing and QGIS takes care about the setup. It works with different
providers (so you can also use it with shape and csv files) and all you have
to do is to tell QGIS the relations between your tables.

Layers
======

QGIS makes no difference between a table and a vector layer. Basically, a vector
layer is a table with a geometry. So can add your table as a vector layer. To
demonstrate you can load the 'region' shapefile (with geometries) and the 'airport'
csv table (without geometries) and a foreign key (fk_region) to the layer
region. This means, that each airport belongs to exactly one region while each
region can have any number of airports (a typical one to many relation).


Definition (Relation Manager)
=============================

The first thing we are going to do is to let QGIS know about the relations between the layer.
This is done in :menuselection:`Settings -->` :menuselection:`Project Properties`.
Open the :guilabel:`Relations` menu and click on :guilabel:`Add`.

* **name** is going to be used as a title. It should be a human readable string, describing, what the relation is used for. We will just call say "Airports" in this case.
* **referencing layer** is the one with the foreign key field on it. In our case this is the airports layer
* **referencing field** will say, which field points to the other layer so this is fk_region in this case
* **referenced layer** is the one with the primary key, pointed to, so here it is the regions layer
* **referenced field** is the primary key of the referenced layer so it is ID
* **id** will be used for internal purposes and has to be unique. You may need it to build custom forms once this is supported. If you leave it empty, one will be generated for you but you can assign one yourself to get one that is easier to handle.

.. _figure_relations_2:

.. only:: html

   **Figure Relations 2:**

.. figure:: /static/user_manual/working_with_vector/relations2.png
   :align: center

   Relation Manager |nix|


Forms
=====

Now that QGIS knows about the relation, it will be used to improve the
forms it generates. As we did not change the default form method (autogenerated)
it will just add a new widget in our form. So let's select the layer region in
the legend and use the identify tool. Depending on your settings, the form might
open directly or you will have to choose to open it in the identification dialog
under actions.

.. _figure_relations_3:

.. only:: html

   **Figure Relations 3:**

.. figure:: /static/user_manual/working_with_vector/relations3.png
   :align: center

   Identification dialog regions with relation to airports |nix|

As you can see, the airports assigned to this particular region are all shown in a
table. And there are also some buttons available. Let's review them shortly

* The |mActionToggleEditing| button is for toggling the edit mode. Be aware that it toggles the edit mode of the airport layer, although we are in the feature form of a feature from the region layer. But the table is representing features of the airport layer.
* The |mActionSignPlus| button will add a new feature to the airport layer. And it will assign the new airport to the current region by default.
* The |mActionRemove| button will delete the selected airport permanently.
* The |mActionLink| symbol will open a new dialog where you can select any existing airport which will then be assigned to the current region. This may be handy if you created the airport on the wrong region by accident.
* The |mActionUnlink| symbol will unlink the selected airport from the current region, leaving them unassigned (the foreign key is set to NULL) effectively.
* The two buttons to the right switch between table view and form view where the later let's you view all the airports in their respective form.

If you work on the airport table, a new widget type is available which lets you
embed the feature form of the referenced region on the feature form of the airports.
It can be used when you open the layer properties of the airports table, switch to
the :menuselection:`Fields` menu and change the widget type of the foreign key field 'fk_region' to
Relation Reference.

If you look at the feature dialog now, you will see, that the form of the region
is embedded inside the airports form and will even have a combobox, which allows you
to assign the current airport to another region.

.. _figure_relations_4:

.. only:: html

   **Figure Relations 4:**

.. figure:: /static/user_manual/working_with_vector/relations4.png
   :align: center

   Identification dialog airport with relation to regions |nix|


