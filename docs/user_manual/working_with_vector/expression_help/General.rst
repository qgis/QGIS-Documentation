:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. env_section

.. _expression_function_General_env:

env
...

Gets an environment variable and returns its content as a string. If the variable is not found, NULL will be returned. This is handy to inject system specific configuration like drive letters or path prefixes. Definition of environment variables depends on the operating system, please check with your system administrator or the operating system documentation how this can be set.

.. list-table::
   :widths: 15 85

   * - Syntax
     - env(name)
   * - Arguments
     - * **name** - The name of the environment variable which should be retrieved.
   * - Examples
     - * ``env( 'LANG' )`` → 'en_US.UTF-8'
       * ``env( 'MY_OWN_PREFIX_VAR' )`` → 'Z:'
       * ``env( 'I_DO_NOT_EXIST' )`` → NULL


.. end_env_section

.. eval_section

.. _expression_function_General_eval:

eval
....

Evaluates an expression which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.

.. list-table::
   :widths: 15 85

   * - Syntax
     - eval(expression)
   * - Arguments
     - * **expression** - an expression string
   * - Examples
     - * ``eval('\'nice\'')`` → 'nice'
       * ``eval(@expression_var)`` → [whatever the result of evaluating @expression_var might be…]


.. end_eval_section

.. eval_template_section

.. _expression_function_General_eval_template:

eval_template
.............

Evaluates a template which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.

.. list-table::
   :widths: 15 85

   * - Syntax
     - eval_template(template)
   * - Arguments
     - * **template** - a template string
   * - Examples
     - * ``eval_template('QGIS [% upper(\'rocks\') %]')`` → QGIS ROCKS


.. end_eval_template_section

.. is_layer_visible_section

.. _expression_function_General_is_layer_visible:

is_layer_visible
................

Returns true if a specified layer is visible.

.. list-table::
   :widths: 15 85

   * - Syntax
     - is_layer_visible(layer)
   * - Arguments
     - * **layer** - a string, representing either a layer name or layer ID
   * - Examples
     - * ``is_layer_visible('baseraster')`` → True


.. end_is_layer_visible_section

.. mime_type_section

.. _expression_function_General_mime_type:

mime_type
.........

Returns the mime type of the binary data.

.. list-table::
   :widths: 15 85

   * - Syntax
     - mime_type(bytes)
   * - Arguments
     - * **bytes** - the binary data
   * - Examples
     - * ``mime_type('<html><body></body></html>')`` → text/html
       * ``mime_type(from_base64('R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAIAOw=='))`` → image/gif


.. end_mime_type_section

.. var_section

.. _expression_function_General_var:

var
...

Returns the value stored within a specified variable.

.. list-table::
   :widths: 15 85

   * - Syntax
     - var(name)
   * - Arguments
     - * **name** - a variable name
   * - Examples
     - * ``var('qgis_version')`` → '2.12'


.. end_var_section

.. with_variable_section

.. _expression_function_General_with_variable:

with_variable
.............

This function sets a variable for any expression code that will be provided as 3rd argument. This is only useful for complicated expressions, where the same calculated value needs to be used in different places.

.. list-table::
   :widths: 15 85

   * - Syntax
     - with_variable(name, value, expression)
   * - Arguments
     - * **name** - the name of the variable to set
       * **value** - the value to set
       * **expression** - the expression for which the variable will be available
   * - Examples
     - * ``with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5)`` → 42


.. end_with_variable_section

