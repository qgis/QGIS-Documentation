:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. color_cmyk_section

.. _expression_function_Color_color_cmyk:

color_cmyk
..........

Returns a string representation of a color based on its cyan, magenta, yellow and black components

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_cmyk(cyan, magenta, yellow, black)
   * - Arguments
     - * **cyan** - cyan component of the color, as a percentage integer value from 0 to 100
       * **magenta** - magenta component of the color, as a percentage integer value from 0 to 100
       * **yellow** - yellow component of the color, as a percentage integer value from 0 to 100
       * **black** - black component of the color, as a percentage integer value from 0 to 100
   * - Examples
     - * ``color_cmyk(100,50,0,10)`` → '0,115,230'


.. end_color_cmyk_section

.. color_cmyka_section

.. _expression_function_Color_color_cmyka:

color_cmyka
...........

Returns a string representation of a color based on its cyan, magenta, yellow, black and alpha (transparency) components

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_cmyka(cyan, magenta, yellow, black, alpha)
   * - Arguments
     - * **cyan** - cyan component of the color, as a percentage integer value from 0 to 100
       * **magenta** - magenta component of the color, as a percentage integer value from 0 to 100
       * **yellow** - yellow component of the color, as a percentage integer value from 0 to 100
       * **black** - black component of the color, as a percentage integer value from 0 to 100
       * **alpha** - alpha component as an integer value from 0 (completely transparent) to 255 (opaque).
   * - Examples
     - * ``color_cmyk(100,50,0,10,200)`` → '0,115,230,200'


.. end_color_cmyka_section

.. color_grayscale_average_section

.. _expression_function_Color_color_grayscale_average:

color_grayscale_average
.......................

Applies a grayscale filter and returns a string representation from a provided color.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_grayscale_average(color)
   * - Arguments
     - * **color** - a color string
   * - Examples
     - * ``color_grayscale_average('255,100,50')`` → '135,135,135,255'


.. end_color_grayscale_average_section

.. color_hsl_section

.. _expression_function_Color_color_hsl:

color_hsl
.........

Returns a string representation of a color based on its hue, saturation, and lightness attributes.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_hsl(hue, saturation, lightness)
   * - Arguments
     - * **hue** - hue of the color, as an integer value from 0 to 360
       * **saturation** - saturation percentage of the color as an integer value from 0 to 100
       * **lightness** - lightness percentage of the color as an integer value from 0 to 100
   * - Examples
     - * ``color_hsl(100,50,70)`` → '166,217,140'


.. end_color_hsl_section

.. color_hsla_section

.. _expression_function_Color_color_hsla:

color_hsla
..........

Returns a string representation of a color based on its hue, saturation, lightness and alpha (transparency) attributes

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_hsla(hue, saturation, lightness, alpha)
   * - Arguments
     - * **hue** - hue of the color, as an integer value from 0 to 360
       * **saturation** - saturation percentage of the color as an integer value from 0 to 100
       * **lightness** - lightness percentage of the color as an integer value from 0 to 100
       * **alpha** - alpha component as an integer value from 0 (completely transparent) to 255 (opaque).
   * - Examples
     - * ``color_hsla(100,50,70,200)`` → '166,217,140,200'


.. end_color_hsla_section

.. color_hsv_section

.. _expression_function_Color_color_hsv:

color_hsv
.........

Returns a string representation of a color based on its hue, saturation, and value attributes.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_hsv(hue, saturation, value)
   * - Arguments
     - * **hue** - hue of the color, as an integer value from 0 to 360
       * **saturation** - saturation percentage of the color as an integer value from 0 to 100
       * **value** - value percentage of the color as an integer from 0 to 100
   * - Examples
     - * ``color_hsv(40,100,100)`` → '255,170,0'


.. end_color_hsv_section

.. color_hsva_section

.. _expression_function_Color_color_hsva:

color_hsva
..........

Returns a string representation of a color based on its hue, saturation, value and alpha (transparency) attributes.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_hsva(hue, saturation, value, alpha)
   * - Arguments
     - * **hue** - hue of the color, as an integer value from 0 to 360
       * **saturation** - saturation percentage of the color as an integer value from 0 to 100
       * **value** - value percentage of the color as an integer from 0 to 100
       * **alpha** - alpha component as an integer value from 0 (completely transparent) to 255 (opaque)
   * - Examples
     - * ``color_hsva(40,100,100,200)`` → '255,170,0,200'


.. end_color_hsva_section

.. color_mix_rgb_section

.. _expression_function_Color_color_mix_rgb:

color_mix_rgb
.............

Returns a string representing a color mixing the red, green, blue, and alpha values of two provided colors based on a given ratio.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_mix_rgb(color1, color2, ratio)
   * - Arguments
     - * **color1** - a color string
       * **color2** - a color string
       * **ratio** - a ratio
   * - Examples
     - * ``color_mix_rgb('0,0,0','255,255,255',0.5)`` → '127,127,127,255'


.. end_color_mix_rgb_section

.. color_part_section

.. _expression_function_Color_color_part:

color_part
..........

Returns a specific component from a color string, e.g., the red component or alpha component.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_part(color, component)
   * - Arguments
     - * **color** - a color string
       * **component** - a string corresponding to the color component to return. Valid options are:

         

         * red: RGB red component (0-255)
         * green: RGB green component (0-255)
         * blue: RGB blue component (0-255)
         * alpha: alpha (transparency) value (0-255)
         * hue: HSV hue (0-360)
         * saturation: HSV saturation (0-100)
         * value: HSV value (0-100)
         * hsl_hue: HSL hue (0-360)
         * hsl_saturation: HSL saturation (0-100)
         * lightness: HSL lightness (0-100)
         * cyan: CMYK cyan component (0-100)
         * magenta: CMYK magenta component (0-100)
         * yellow: CMYK yellow component (0-100)
         * black: CMYK black component (0-100)
         

   * - Examples
     - * ``color_part('200,10,30','green')`` → 10


.. end_color_part_section

.. color_rgb_section

.. _expression_function_Color_color_rgb:

color_rgb
.........

Returns a string representation of a color based on its red, green, and blue components.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_rgb(red, green, blue)
   * - Arguments
     - * **red** - red component as an integer value from 0 to 255
       * **green** - green component as an integer value from 0 to 255
       * **blue** - blue component as an integer value from 0 to 255
   * - Examples
     - * ``color_rgb(255,127,0)`` → '255,127,0'


.. end_color_rgb_section

.. color_rgba_section

.. _expression_function_Color_color_rgba:

color_rgba
..........

Returns a string representation of a color based on its red, green, blue, and alpha (transparency) components.

.. list-table::
   :widths: 15 85

   * - Syntax
     - color_rgba(red, green, blue, alpha)
   * - Arguments
     - * **red** - red component as an integer value from 0 to 255
       * **green** - green component as an integer value from 0 to 255
       * **blue** - blue component as an integer value from 0 to 255
       * **alpha** - alpha component as an integer value from 0 (completely transparent) to 255 (opaque).
   * - Examples
     - * ``color_rgba(255,127,0,200)`` → '255,127,0,200'


.. end_color_rgba_section

.. create_ramp_section

.. _expression_function_Color_create_ramp:

create_ramp
...........

Returns a gradient ramp from a map of color strings and steps.

.. list-table::
   :widths: 15 85

   * - Syntax
     - create_ramp(map, [discrete=false])

       [] marks optional arguments
   * - Arguments
     - * **map** - a map of color strings and steps
       * **discrete** - set this parameter to true to create a discrete color ramp
   * - Examples
     - * ``ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1)`` → '255,0,0,255'


.. end_create_ramp_section

.. darker_section

.. _expression_function_Color_darker:

darker
......

Returns a darker (or lighter) color string

.. list-table::
   :widths: 15 85

   * - Syntax
     - darker(color, factor)
   * - Arguments
     - * **color** - a color string
       * **factor** - an integer corresponding to the darkening factor:

         * if the factor is greater than 100, this function returns a darker color (e.g., setting factor to 200 returns a color that is half the brightness);
         * if the factor is less than 100, the return color is lighter, but using the lighter() function for this purpose is recommended;
         * if the factor is 0 or negative, the return value is unspecified.
         

   * - Examples
     - * ``darker('200,10,30', 200)`` → '100,5,15,255'


.. end_darker_section

.. lighter_section

.. _expression_function_Color_lighter:

lighter
.......

Returns a lighter (or darker) color string

.. list-table::
   :widths: 15 85

   * - Syntax
     - lighter(color, factor)
   * - Arguments
     - * **color** - a color string
       * **factor** - an integer corresponding to the lightening factor:

         * if the factor is greater than 100, this function returns a lighter color (e.g., setting factor to 150 returns a color that is 50% brighter);
         * if the factor is less than 100, the return color is darker, but using the darker() function for this purpose is recommended;
         * if the factor is 0 or negative, the return value is unspecified.
         

   * - Examples
     - * ``lighter('200,10,30', 200)`` → '255,158,168,255'


.. end_lighter_section

.. project_color_section

.. _expression_function_Color_project_color:

project_color
.............

Returns a color from the project's color scheme.

.. list-table::
   :widths: 15 85

   * - Syntax
     - project_color(name)
   * - Arguments
     - * **name** - a color name
   * - Examples
     - * ``project_color('Logo color')`` → '20,140,50'


.. end_project_color_section

.. ramp_color_section

.. _expression_function_Color_ramp_color:

ramp_color
..........

Returns a string representing a color from a color ramp.

**Saved ramp variant**

Returns a string representing a color from a saved ramp

.. list-table::
   :widths: 15 85

   * - Syntax
     - ramp_color(ramp_name, value)
   * - Arguments
     - * **ramp_name** - the name of the color ramp as a string, for example 'Spectral'
       * **value** - the position on the ramp to select the color from as a real number between 0 and 1
   * - Examples
     - * ``ramp_color('Spectral',0.3)`` → '253,190,115,255'

.. note:: The color ramps available vary between QGIS installations. This function may not give the expected results if you move your QGIS project between installations.


**Expression-created ramp variant**

Returns a string representing a color from an expression-created ramp

.. list-table::
   :widths: 15 85

   * - Syntax
     - ramp_color(ramp, value)
   * - Arguments
     - * **ramp** - the color ramp
       * **value** - the position on the ramp to select the color from as a real number between 0 and 1
   * - Examples
     - * ``ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1)`` → '255,0,0,255'


.. end_ramp_color_section

.. set_color_part_section

.. _expression_function_Color_set_color_part:

set_color_part
..............

Sets a specific color component for a color string, e.g., the red component or alpha component.

.. list-table::
   :widths: 15 85

   * - Syntax
     - set_color_part(color, component, value)
   * - Arguments
     - * **color** - a color string
       * **component** - a string corresponding to the color component to set. Valid options are:

         

         * red: RGB red component (0-255)
         * green: RGB green component (0-255)
         * blue: RGB blue component (0-255)
         * alpha: alpha (transparency) value (0-255)
         * hue: HSV hue (0-360)
         * saturation: HSV saturation (0-100)
         * value: HSV value (0-100)
         * hsl_hue: HSL hue (0-360)
         * hsl_saturation: HSL saturation (0-100)
         * lightness: HSL lightness (0-100)
         * cyan: CMYK cyan component (0-100)
         * magenta: CMYK magenta component (0-100)
         * yellow: CMYK yellow component (0-100)
         * black: CMYK black component (0-100)
         

       * **value** - new value for color component, respecting the ranges listed above
   * - Examples
     - * ``set_color_part('200,10,30','green',50)`` → '200,50,30,255'


.. end_set_color_part_section

