:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. age_section

.. _expression_function_Date_and_Time_age:

age
...

Returns the difference between two dates or datetimes.

The difference is returned as an ``Interval`` and needs to be used with one of the following functions in order to extract useful information:



* ``year``
* ``month``
* ``week``
* ``day``
* ``hour``
* ``minute``
* ``second``



.. list-table::
   :widths: 15 85

   * - Syntax
     - age(datetime1, datetime2)
   * - Arguments
     - * **datetime1** - a string, date or datetime representing the later date
       * **datetime2** - a string, date or datetime representing the earlier date
   * - Examples
     - * ``day(age('2012-05-12','2012-05-02'))`` → 10
       * ``hour(age('2012-05-12','2012-05-02'))`` → 240


.. end_age_section

.. datetime_from_epoch_section

.. _expression_function_Date_and_Time_datetime_from_epoch:

datetime_from_epoch
...................

Returns a datetime whose date and time are the number of milliseconds, msecs, that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (Qt.UTC), and converted to Qt.LocalTime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - datetime_from_epoch(int)
   * - Arguments
     - * **int** - number (milliseconds)
   * - Examples
     - * ``datetime_from_epoch(1483225200000)`` → 2017-01-01T00:00:00


.. end_datetime_from_epoch_section

.. day_section

.. _expression_function_Date_and_Time_day:

day
...

Extracts the day from a date, or the number of days from an interval.

**Date variant**

Extracts the day from a date or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - day(date)
   * - Arguments
     - * **date** - a date or datetime value
   * - Examples
     - * ``day('2012-05-12')`` → 12


**Interval variant**

Calculates the length in days of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - day(interval)
   * - Arguments
     - * **interval** - interval value to return number of days from
   * - Examples
     - * ``day(to_interval('3 days'))`` → 3
       * ``day(to_interval('3 weeks 2 days'))`` → 23
       * ``day(age('2012-01-01','2010-01-01'))`` → 730


.. end_day_section

.. day_of_week_section

.. _expression_function_Date_and_Time_day_of_week:

day_of_week
...........

Returns the day of the week for a specified date or datetime. The returned value ranges from 0 to 6, where 0 corresponds to a Sunday and 6 to a Saturday.

.. list-table::
   :widths: 15 85

   * - Syntax
     - day_of_week(date)
   * - Arguments
     - * **date** - date or datetime value
   * - Examples
     - * ``day_of_week(to_date('2015-09-21'))`` → 1


.. end_day_of_week_section

.. epoch_section

.. _expression_function_Date_and_Time_epoch:

epoch
.....

Returns the interval in milliseconds between the unix epoch and a given date value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - epoch(date)
   * - Arguments
     - * **date** - a date or datetime value
   * - Examples
     - * ``epoch(to_date('2017-01-01'))`` → 1483203600000


.. end_epoch_section

.. format_date_section

.. _expression_function_Date_and_Time_format_date:

format_date
...........

Formats a date type or string into a custom string format. Uses Qt date/time format strings. See `QDateTime::toString <https://doc.qt.io/qt-5/qdatetime.html#toString>`_.

.. list-table::
   :widths: 15 85

   * - Syntax
     - format_date(datetime, format, [language])

       [] marks optional arguments
   * - Arguments
     - * **datetime** - date, time or datetime value
       * **format** - String template used to format the string. 

         .. csv-table::
            :header-rows: 1
            :widths: 20, 80

            "Expression", "Output"
            "d", "the day as number without a leading zero (1 to 31)"
            "dd", "the day as number with a leading zero (01 to 31)"
            "ddd", "the abbreviated localized day name (e.g. 'Mon' to 'Sun')"
            "dddd", "the long localized day name (e.g. 'Monday' to 'Sunday')"
            "M", "the month as number without a leading zero (1-12)"
            "MM", "the month as number with a leading zero (01-12)"
            "MMM", "the abbreviated localized month name (e.g. 'Jan' to 'Dec')"
            "MMMM", "the long localized month name (e.g. 'January' to 'December')"
            "yy", "the year as two digit number (00-99)"
            "yyyy", "the year as four digit number"


         These expressions may be used for the time part of the format string:


         .. csv-table::
            :header-rows: 1
            :widths: 20, 80

            "Expression", "Output"
            "h", "the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)"
            "hh", "the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)"
            "H", "the hour without a leading zero (0 to 23, even with AM/PM display)"
            "HH", "the hour with a leading zero (00 to 23, even with AM/PM display)"
            "m", "the minute without a leading zero (0 to 59)"
            "mm", "the minute with a leading zero (00 to 59)"
            "s", "the second without a leading zero (0 to 59)"
            "ss", "the second with a leading zero (00 to 59)"
            "z", "the milliseconds without trailing zeroes (0 to 999)"
            "zzz", "the milliseconds with trailing zeroes (000 to 999)"
            "AP or A", "interpret as an AM/PM time. *AP* must be either 'AM' or 'PM'."
            "ap or a", "Interpret as an AM/PM time. *ap* must be either 'am' or 'pm'."

       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to format the date into a custom string
   * - Examples
     - * ``format_date('2012-05-15','dd.MM.yyyy')`` → '15.05.2012'
       * ``format_date('2012-05-15','d MMMM yyyy','fr')`` → '15 mai 2012'


.. end_format_date_section

.. hour_section

.. _expression_function_Date_and_Time_hour:

hour
....

Extracts the hour part from a datetime or time, or the number of hours from an interval.

**Time variant**

Extracts the hour part from a time or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - hour(datetime)
   * - Arguments
     - * **datetime** - a time or datetime value
   * - Examples
     - * ``hour( to_datetime('2012-07-22 13:24:57') )`` → 13


**Interval variant**

Calculates the length in hours of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - hour(interval)
   * - Arguments
     - * **interval** - interval value to return number of hours from
   * - Examples
     - * ``hour(to_interval('3 hours'))`` → 3
       * ``hour(age('2012-07-22T13:00:00','2012-07-22T10:00:00'))`` → 3
       * ``hour(age('2012-01-01','2010-01-01'))`` → 17520


.. end_hour_section

.. make_date_section

.. _expression_function_Date_and_Time_make_date:

make_date
.........

Creates a date value from year, month and day numbers.

.. list-table::
   :widths: 15 85

   * - Syntax
     - make_date(year, month, day)
   * - Arguments
     - * **year** - Year number. Years 1 to 99 are interpreted as is. Year 0 is invalid.
       * **month** - Month number, where 1=January
       * **day** - Day number, beginning with 1 for the first day in the month
   * - Examples
     - * ``make_date(2020,5,4)`` → date value 2020-05-04


.. end_make_date_section

.. make_datetime_section

.. _expression_function_Date_and_Time_make_datetime:

make_datetime
.............

Creates a datetime value from year, month, day, hour, minute and second numbers.

.. list-table::
   :widths: 15 85

   * - Syntax
     - make_datetime(year, month, day, hour, minute, second)
   * - Arguments
     - * **year** - Year number. Years 1 to 99 are interpreted as is. Year 0 is invalid.
       * **month** - Month number, where 1=January
       * **day** - Day number, beginning with 1 for the first day in the month
       * **hour** - Hour number
       * **minute** - Minutes
       * **second** - Seconds (fractional values include milliseconds)
   * - Examples
     - * ``make_datetime(2020,5,4,13,45,30.5)`` → datetime value 2020-05-04 13:45:30.500


.. end_make_datetime_section

.. make_interval_section

.. _expression_function_Date_and_Time_make_interval:

make_interval
.............

Creates an interval value from year, month, weeks, days, hours, minute and seconds values.

.. list-table::
   :widths: 15 85

   * - Syntax
     - make_interval([years=0], [months=0], [weeks=0], [days=0], [hours=0], [minutes=0], [seconds=0])

       [] marks optional arguments
   * - Arguments
     - * **years** - Number of years (assumes a 365.25 day year length).
       * **months** - Number of months (assumes a 30 day month length)
       * **weeks** - Number of weeks
       * **days** - Number of days
       * **hours** - Number of hours
       * **minutes** - Number of minutes
       * **seconds** - Number of seconds
   * - Examples
     - * ``make_interval(hours:=3)`` → interval: 3 hours
       * ``make_interval(days:=2, hours:=3)`` → interval: 2.125 days
       * ``make_interval(minutes:=0.5, seconds:=5)`` → interval: 35 seconds


.. end_make_interval_section

.. make_time_section

.. _expression_function_Date_and_Time_make_time:

make_time
.........

Creates a time value from hour, minute and second numbers.

.. list-table::
   :widths: 15 85

   * - Syntax
     - make_time(hour, minute, second)
   * - Arguments
     - * **hour** - Hour number
       * **minute** - Minutes
       * **second** - Seconds (fractional values include milliseconds)
   * - Examples
     - * ``make_time(13,45,30.5)`` → time value 13:45:30.500


.. end_make_time_section

.. minute_section

.. _expression_function_Date_and_Time_minute:

minute
......

Extracts the minutes part from a datetime or time, or the number of minutes from an interval.

**Time variant**

Extracts the minutes part from a time or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - minute(datetime)
   * - Arguments
     - * **datetime** - a time or datetime value
   * - Examples
     - * ``minute( to_datetime('2012-07-22 13:24:57') )`` → 24


**Interval variant**

Calculates the length in minutes of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - minute(interval)
   * - Arguments
     - * **interval** - interval value to return number of minutes from
   * - Examples
     - * ``minute(to_interval('3 minutes'))`` → 3
       * ``minute(age('2012-07-22T00:20:00','2012-07-22T00:00:00'))`` → 20
       * ``minute(age('2012-01-01','2010-01-01'))`` → 1051200


.. end_minute_section

.. month_section

.. _expression_function_Date_and_Time_month:

month
.....

Extracts the month part from a date, or the number of months from an interval.

**Date variant**

Extracts the month part from a date or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - month(date)
   * - Arguments
     - * **date** - a date or datetime value
   * - Examples
     - * ``month('2012-05-12')`` → 05


**Interval variant**

Calculates the length in months of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - month(interval)
   * - Arguments
     - * **interval** - interval value to return number of months from
   * - Examples
     - * ``month(to_interval('3 months'))`` → 3
       * ``month(age('2012-01-01','2010-01-01'))`` → 4.03333


.. end_month_section

.. now_section

.. _expression_function_Date_and_Time_now:

now
...

Returns the current date and time. The function is static and will return consistent results while evaluating. The time returned is the time when the expression is prepared.

.. list-table::
   :widths: 15 85

   * - Syntax
     - now()
   * - Examples
     - * ``now()`` → 2012-07-22T13:24:57


.. end_now_section

.. second_section

.. _expression_function_Date_and_Time_second:

second
......

Extracts the seconds part from a datetime or time, or the number of seconds from an interval.

**Time variant**

Extracts the seconds part from a time or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - second(datetime)
   * - Arguments
     - * **datetime** - a time or datetime value
   * - Examples
     - * ``second( to_datetime('2012-07-22 13:24:57') )`` → 57


**Interval variant**

Calculates the length in seconds of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - second(interval)
   * - Arguments
     - * **interval** - interval value to return number of seconds from
   * - Examples
     - * ``second(to_interval('3 minutes'))`` → 180
       * ``second(age('2012-07-22T00:20:00','2012-07-22T00:00:00'))`` → 1200
       * ``second(age('2012-01-01','2010-01-01'))`` → 63072000


.. end_second_section

.. to_date_section

.. _expression_function_Date_and_Time_to_date:

to_date
.......

Converts a string into a date object. An optional format string can be provided to parse the string; see `QDate::fromString <https://doc.qt.io/qt-5/qdate.html#fromString-2>`_ for additional documentation on the format.

.. list-table::
   :widths: 15 85

   * - Syntax
     - to_date(string, [format], [language])

       [] marks optional arguments
   * - Arguments
     - * **string** - string representing a date value
       * **format** - format used to convert the string into a date
       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to convert the string into a date
   * - Examples
     - * ``to_date('2012-05-04')`` → 2012-05-04
       * ``to_date('June 29, 2019','MMMM d, yyyy')`` → 2019-06-29
       * ``to_date('29 juin, 2019','d MMMM, yyyy','fr')`` → 2019-06-29


.. end_to_date_section

.. to_datetime_section

.. _expression_function_Date_and_Time_to_datetime:

to_datetime
...........

Converts a string into a datetime object. An optional format string can be provided to parse the string; see `QDate::fromString <https://doc.qt.io/qt-5/qdate.html#fromString-2>`_ and `QTime::fromString <https://doc.qt.io/qt-5/qtime.html#fromString-1>`_ for additional documentation on the format.

.. list-table::
   :widths: 15 85

   * - Syntax
     - to_datetime(string, [format], [language])

       [] marks optional arguments
   * - Arguments
     - * **string** - string representing a datetime value
       * **format** - format used to convert the string into a datetime
       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to convert the string into a datetime
   * - Examples
     - * ``to_datetime('2012-05-04 12:50:00')`` → 2012-05-04T12:50:00
       * ``to_datetime('June 29, 2019 @ 12:34','MMMM d, yyyy @ HH:mm')`` → 2019-06-29T12:34
       * ``to_datetime('29 juin, 2019 @ 12:34','d MMMM, yyyy @ HH:mm','fr')`` → 2019-06-29T12:34


.. end_to_datetime_section

.. to_interval_section

.. _expression_function_Date_and_Time_to_interval:

to_interval
...........

Converts a string to an interval type. Can be used to take days, hours, month, etc of a date.

.. list-table::
   :widths: 15 85

   * - Syntax
     - to_interval(string)
   * - Arguments
     - * **string** - a string representing an interval. Allowable formats include {n} days {n} hours {n} months.
   * - Examples
     - * ``to_interval('1 day 2 hours')`` → interval: 1.08333 days
       * ``to_interval( '0.5 hours' )`` → interval: 30 minutes
       * ``to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours')`` → 2012-05-04T10:00:00


.. end_to_interval_section

.. to_time_section

.. _expression_function_Date_and_Time_to_time:

to_time
.......

Converts a string into a time object. An optional format string can be provided to parse the string; see `QTime::fromString <https://doc.qt.io/qt-5/qtime.html#fromString-1>`_ for additional documentation on the format.

.. list-table::
   :widths: 15 85

   * - Syntax
     - to_time(string, [format], [language])

       [] marks optional arguments
   * - Arguments
     - * **string** - string representing a time value
       * **format** - format used to convert the string into a time
       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to convert the string into a time
   * - Examples
     - * ``to_time('12:30:01')`` → 12:30:01
       * ``to_time('12:34','HH:mm')`` → 12:34:00
       * ``to_time('12:34','HH:mm','fr')`` → 12:34:00


.. end_to_time_section

.. week_section

.. _expression_function_Date_and_Time_week:

week
....

Extracts the week number from a date, or the number of weeks from an interval.

**Date variant**

Extracts the week number from a date or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - week(date)
   * - Arguments
     - * **date** - a date or datetime value
   * - Examples
     - * ``week('2012-05-12')`` → 19


**Interval variant**

Calculates the length in weeks of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - week(interval)
   * - Arguments
     - * **interval** - interval value to return number of months from
   * - Examples
     - * ``week(to_interval('3 weeks'))`` → 3
       * ``week(age('2012-01-01','2010-01-01'))`` → 104.285


.. end_week_section

.. year_section

.. _expression_function_Date_and_Time_year:

year
....

Extracts the year part from a date, or the number of years from an interval.

**Date variant**

Extracts the year part from a date or datetime.

.. list-table::
   :widths: 15 85

   * - Syntax
     - year(date)
   * - Arguments
     - * **date** - a date or datetime value
   * - Examples
     - * ``year('2012-05-12')`` → 2012


**Interval variant**

Calculates the length in years of an interval.

.. list-table::
   :widths: 15 85

   * - Syntax
     - year(interval)
   * - Arguments
     - * **interval** - interval value to return number of years from
   * - Examples
     - * ``year(to_interval('3 years'))`` → 3
       * ``year(age('2012-01-01','2010-01-01'))`` → 1.9986


.. end_year_section

