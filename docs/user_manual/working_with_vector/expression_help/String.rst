:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. ascii_section

.. _expression_function_String_ascii:

ascii
.....

Returns the unicode code associated with the first character of a string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - ascii(string)
   * - Arguments
     - * **string** - the string to convert to unicode code
   * - Examples
     - * ``ascii('Q')`` → 81


.. end_ascii_section

.. char_section

.. _expression_function_String_char:

char
....

Returns the character associated with a unicode code.

.. list-table::
   :widths: 15 85

   * - Syntax
     - char(code)
   * - Arguments
     - * **code** - a unicode code number
   * - Examples
     - * ``char(81)`` → 'Q'


.. end_char_section

.. concat_section

.. _expression_function_String_concat:

concat
......

Concatenates several strings to one. NULL values are converted to empty strings. Other values (like numbers) are converted to strings.

.. list-table::
   :widths: 15 85

   * - Syntax
     - concat(string1, string2, ...)
   * - Arguments
     - * **string** - a string value
   * - Examples
     - * ``concat('sun', 'set')`` → 'sunset'
       * ``concat('a','b','c','d','e')`` → 'abcde'
       * ``concat('Anno ', 1984)`` → 'Anno 1984'
       * ``concat('The Wall', NULL)`` → 'The Wall'


.. end_concat_section

.. format_section

.. _expression_function_String_format:

format
......

Format a string using supplied arguments.

.. list-table::
   :widths: 15 85

   * - Syntax
     - format(string, arg1, arg2, ...)
   * - Arguments
     - * **string** - A string with place holders for the arguments. Use %1, %2, etc for placeholders. Placeholders can be repeated.
       * **arg** - any type. Any number of arguments.
   * - Examples
     - * ``format('This %1 a %2','is', 'test')`` → 'This is a test''


.. end_format_section

.. format_date_section

.. _expression_function_String_format_date:

format_date
...........

Formats a date type or string into a custom string format. Uses Qt date/time format strings. See `QDateTime::toString <https://doc.qt.io/qt-5/qdatetime.html#toString>`_.

.. list-table::
   :widths: 15 85

   * - Syntax
     - format_date(datetime, format, [language])

       [] marks optional arguments
   * - Arguments
     - * **datetime** - date, time or datetime value
       * **format** - String template used to format the string. 

         .. csv-table::
            :header-rows: 1
            :widths: 20, 80

            "Expression", "Output"
            "d", "the day as number without a leading zero (1 to 31)"
            "dd", "the day as number with a leading zero (01 to 31)"
            "ddd", "the abbreviated localized day name (e.g. 'Mon' to 'Sun')"
            "dddd", "the long localized day name (e.g. 'Monday' to 'Sunday')"
            "M", "the month as number without a leading zero (1-12)"
            "MM", "the month as number with a leading zero (01-12)"
            "MMM", "the abbreviated localized month name (e.g. 'Jan' to 'Dec')"
            "MMMM", "the long localized month name (e.g. 'January' to 'December')"
            "yy", "the year as two digit number (00-99)"
            "yyyy", "the year as four digit number"


         These expressions may be used for the time part of the format string:


         .. csv-table::
            :header-rows: 1
            :widths: 20, 80

            "Expression", "Output"
            "h", "the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)"
            "hh", "the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)"
            "H", "the hour without a leading zero (0 to 23, even with AM/PM display)"
            "HH", "the hour with a leading zero (00 to 23, even with AM/PM display)"
            "m", "the minute without a leading zero (0 to 59)"
            "mm", "the minute with a leading zero (00 to 59)"
            "s", "the second without a leading zero (0 to 59)"
            "ss", "the second with a leading zero (00 to 59)"
            "z", "the milliseconds without trailing zeroes (0 to 999)"
            "zzz", "the milliseconds with trailing zeroes (000 to 999)"
            "AP or A", "interpret as an AM/PM time. *AP* must be either 'AM' or 'PM'."
            "ap or a", "Interpret as an AM/PM time. *ap* must be either 'am' or 'pm'."

       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to format the date into a custom string
   * - Examples
     - * ``format_date('2012-05-15','dd.MM.yyyy')`` → '15.05.2012'
       * ``format_date('2012-05-15','d MMMM yyyy','fr')`` → '15 mai 2012'


.. end_format_date_section

.. format_number_section

.. _expression_function_String_format_number:

format_number
.............

Returns a number formatted with the locale separator for thousands. Also truncates the decimal places to the number of supplied places.

.. list-table::
   :widths: 15 85

   * - Syntax
     - format_number(number, places, [language])

       [] marks optional arguments
   * - Arguments
     - * **number** - number to be formatted
       * **places** - integer representing the number of decimal places to truncate the string to.
       * **language** - language (lowercase, two- or three-letter, ISO 639 language code) used to format the number into a string
   * - Examples
     - * ``format_number(10000000.332,2)`` → '10,000,000.33'


.. end_format_number_section

.. left_section

.. _expression_function_String_left:

left
....

Returns a substring that contains the *n* leftmost characters of the string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - left(string, length)
   * - Arguments
     - * **string** - a string
       * **length** - integer. The number of characters from the left of the string to return.
   * - Examples
     - * ``left('Hello World',5)`` → 'Hello'


.. end_left_section

.. length_section

.. _expression_function_String_length:

length
......

Returns the number of characters in a string or the length of a geometry linestring.

**String variant**

Returns the number of characters in a string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - length(string)
   * - Arguments
     - * **string** - string to count length of
   * - Examples
     - * ``length('hello')`` → 5


**Geometry variant**

Calculate the length of a geometry line object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned length will match the units for the SRS. This differs from the calculations performed by the $length function, which will perform ellipsoidal calculations based on the project's ellipsoid and distance unit settings.

.. list-table::
   :widths: 15 85

   * - Syntax
     - length(geometry)
   * - Arguments
     - * **geometry** - line geometry object
   * - Examples
     - * ``length(geom_from_wkt('LINESTRING(0 0, 4 0)'))`` → 4.0


.. end_length_section

.. lower_section

.. _expression_function_String_lower:

lower
.....

Converts a string to lower case letters.

.. list-table::
   :widths: 15 85

   * - Syntax
     - lower(string)
   * - Arguments
     - * **string** - the string to convert to lower case
   * - Examples
     - * ``lower('HELLO World')`` → 'hello world'


.. end_lower_section

.. lpad_section

.. _expression_function_String_lpad:

lpad
....

Returns a string padded on the left to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated.

.. list-table::
   :widths: 15 85

   * - Syntax
     - lpad(string, width, fill)
   * - Arguments
     - * **string** - string to pad
       * **width** - length of new string
       * **fill** - character to pad the remaining space with
   * - Examples
     - * ``lpad('Hello', 10, 'x')`` → 'xxxxxHello'
       * ``lpad('Hello', 3, 'x')`` → 'Hel'


.. end_lpad_section

.. regexp_match_section

.. _expression_function_String_regexp_match:

regexp_match
............

Return the first matching position matching a regular expression within a string, or 0 if the substring is not found.

.. list-table::
   :widths: 15 85

   * - Syntax
     - regexp_match(input_string, regex)
   * - Arguments
     - * **input_string** - the string to test against the regular expression
       * **regex** - The regular expression to test against. Backslash characters must be double escaped (e.g., "\\\\s" to match a white space character).
   * - Examples
     - * ``regexp_match('QGIS ROCKS','\\\\sROCKS')`` → 5


.. end_regexp_match_section

.. regexp_replace_section

.. _expression_function_String_regexp_replace:

regexp_replace
..............

Returns a string with the supplied regular expression replaced.

.. list-table::
   :widths: 15 85

   * - Syntax
     - regexp_replace(input_string, regex, replacement)
   * - Arguments
     - * **input_string** - the string to replace matches in
       * **regex** - The regular expression to replace. Backslash characters must be double escaped (e.g., "\\\\s" to match a white space character).
       * **replacement** - The string that will replace any matching occurrences of the supplied regular expression. Captured groups can be inserted into the replacement string using \\\\1, \\\\2, etc.
   * - Examples
     - * ``regexp_replace('QGIS SHOULD ROCK','\\\\sSHOULD\\\\s',' DOES ')`` → 'QGIS DOES ROCK'
       * ``regexp_replace('ABC123','\\\\d+','')`` → 'ABC'
       * ``regexp_replace('my name is John','(.*) is (.*)','\\\\2 is \\\\1')`` → 'John is my name'


.. end_regexp_replace_section

.. regexp_substr_section

.. _expression_function_String_regexp_substr:

regexp_substr
.............

Returns the portion of a string which matches a supplied regular expression.

.. list-table::
   :widths: 15 85

   * - Syntax
     - regexp_substr(input_string, regex)
   * - Arguments
     - * **input_string** - the string to find matches in
       * **regex** - The regular expression to match against. Backslash characters must be double escaped (e.g., "\\\\s" to match a white space character).
   * - Examples
     - * ``regexp_substr('abc123','(\\\\d+)')`` → '123'


.. end_regexp_substr_section

.. replace_section

.. _expression_function_String_replace:

replace
.......

Returns a string with the supplied string, array, or map of strings replaced.

**String & array variant**

Returns a string with the supplied string or array of strings replaced by a string or an array of strings.

.. list-table::
   :widths: 15 85

   * - Syntax
     - replace(string, before, after)
   * - Arguments
     - * **string** - the input string
       * **before** - the string or array of strings to replace
       * **after** - the string or array of strings to use as a replacement
   * - Examples
     - * ``replace('QGIS SHOULD ROCK','SHOULD','DOES')`` → 'QGIS DOES ROCK'
       * ``replace('QGIS ABC',array('A','B','C'),array('X','Y','Z'))`` → 'QGIS XYZ'
       * ``replace('QGIS',array('Q','S'),'')`` → 'GI'


**Map variant**

Returns a string with the supplied map keys replaced by paired values.

.. list-table::
   :widths: 15 85

   * - Syntax
     - replace(string, map)
   * - Arguments
     - * **string** - the input string
       * **map** - the map containing keys and values
   * - Examples
     - * ``replace('APP SHOULD ROCK',map('APP','QGIS','SHOULD','DOES'))`` → 'QGIS DOES ROCK'


.. end_replace_section

.. right_section

.. _expression_function_String_right:

right
.....

Returns a substring that contains the *n* rightmost characters of the string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - right(string, length)
   * - Arguments
     - * **string** - a string
       * **length** - integer. The number of characters from the right of the string to return.
   * - Examples
     - * ``right('Hello World',5)`` → 'World'


.. end_right_section

.. rpad_section

.. _expression_function_String_rpad:

rpad
....

Returns a string padded on the right to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated.

.. list-table::
   :widths: 15 85

   * - Syntax
     - rpad(string, width, fill)
   * - Arguments
     - * **string** - string to pad
       * **width** - length of new string
       * **fill** - character to pad the remaining space with
   * - Examples
     - * ``rpad('Hello', 10, 'x')`` → 'Helloxxxxx'
       * ``rpad('Hello', 3, 'x')`` → 'Hel'


.. end_rpad_section

.. strpos_section

.. _expression_function_String_strpos:

strpos
......

Return the first matching position of a substring within another string, or 0 if the substring is not found.

.. list-table::
   :widths: 15 85

   * - Syntax
     - strpos(haystack, needle)
   * - Arguments
     - * **haystack** - string that is to be searched
       * **needle** - string to search for
   * - Examples
     - * ``strpos('HELLO WORLD','WORLD')`` → 7
       * ``strpos('HELLO WORLD','GOODBYE')`` → 0


.. end_strpos_section

.. substr_section

.. _expression_function_String_substr:

substr
......

Returns a part of a string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - substr(string, start, [length])

       [] marks optional arguments
   * - Arguments
     - * **string** - the full input string
       * **start** - integer representing start position to extract beginning with 1; if start is negative, the return string will begin at the end of the string minus the start value
       * **length** - integer representing length of string to extract; if length is negative, the return string will omit the given length of characters from the end of the string
   * - Examples
     - * ``substr('HELLO WORLD',3,5)`` → 'LLO W'
       * ``substr('HELLO WORLD',6)`` → ' WORLD'
       * ``substr('HELLO WORLD',-5)`` → 'WORLD'
       * ``substr('HELLO',3,-1)`` → 'LL'
       * ``substr('HELLO WORLD',-5,2)`` → 'WO'
       * ``substr('HELLO WORLD',-5,-1)`` → 'WORL'


.. end_substr_section

.. title_section

.. _expression_function_String_title:

title
.....

Converts all words of a string to title case (all words lower case with leading capital letter).

.. list-table::
   :widths: 15 85

   * - Syntax
     - title(string)
   * - Arguments
     - * **string** - the string to convert to title case
   * - Examples
     - * ``title('hello WOrld')`` → 'Hello World'


.. end_title_section

.. to_string_section

.. _expression_function_String_to_string:

to_string
.........

Converts a number to string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - to_string(number)
   * - Arguments
     - * **number** - Integer or real value. The number to convert to string.
   * - Examples
     - * ``to_string(123)`` → '123'


.. end_to_string_section

.. trim_section

.. _expression_function_String_trim:

trim
....

Removes all leading and trailing whitespace (spaces, tabs, etc) from a string.

.. list-table::
   :widths: 15 85

   * - Syntax
     - trim(string)
   * - Arguments
     - * **string** - string to trim
   * - Examples
     - * ``trim('   hello world    ')`` → 'hello world'


.. end_trim_section

.. upper_section

.. _expression_function_String_upper:

upper
.....

Converts a string to upper case letters.

.. list-table::
   :widths: 15 85

   * - Syntax
     - upper(string)
   * - Arguments
     - * **string** - the string to convert to upper case
   * - Examples
     - * ``upper('hello WOrld')`` → 'HELLO WORLD'


.. end_upper_section

.. wordwrap_section

.. _expression_function_String_wordwrap:

wordwrap
........

Returns a string wrapped to a maximum/minimum number of characters.

.. list-table::
   :widths: 15 85

   * - Syntax
     - wordwrap(string, wrap_length, [delimiter_string])

       [] marks optional arguments
   * - Arguments
     - * **string** - the string to be wrapped
       * **wrap_length** - an integer. If wrap_length is positive the number represents the ideal maximum number of characters to wrap; if negative, the number represents the minimum number of characters to wrap.
       * **delimiter_string** - Optional delimiter string to wrap to a new line.
   * - Examples
     - * ``wordwrap('UNIVERSITY OF QGIS',13)`` → 'UNIVERSITY OF<br>QGIS'
       * ``wordwrap('UNIVERSITY OF QGIS',-3)`` → 'UNIVERSITY<br>OF QGIS'


.. end_wordwrap_section

