# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-28 10:31+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:9
msgid "Network analysis library"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:14
msgid ""
"Starting from revision `ee19294562 "
"<https://github.com/qgis/QGIS/commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_"
" (QGIS >= 1.8) the new network analysis library was added to the QGIS "
"core analysis library. The library:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:18
msgid "creates mathematical graph from geographical data (polyline vector layers)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:19
msgid ""
"implements basic methods from graph theory (currently only Dijkstra's "
"algorithm)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:22
msgid ""
"The network analysis library was created by exporting basic functions "
"from the RoadGraph core plugin and now you can use it's methods in "
"plugins or directly from the Python console."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:27
msgid "General information"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:29
msgid "Briefly, a typical use case can be described as:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:31
msgid "create graph from geodata (usually polyline vector layer)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:32
msgid "run graph analysis"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:33
msgid "use analysis results (for example, visualize them)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:36
msgid "Building a graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:38
msgid ""
"The first thing you need to do --- is to prepare input data, that is to "
"convert a vector layer into a graph. All further actions will use this "
"graph, not the layer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:42
msgid ""
"As a source we can use any polyline vector layer. Nodes of the polylines "
"become graph vertexes, and segments of the polylines are graph edges. If "
"several nodes have the same coordinates then they are the same graph "
"vertex. So two lines that have a common node become connected to each "
"other."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:47
msgid ""
"Additionally, during graph creation it is possible to \"fix\" (\"tie\") "
"to the input vector layer any number of additional points. For each "
"additional point a match will be foundÂ --- the closest graph vertex or "
"closest graph edge. In the latter case the edge will be split and a new "
"vertex added."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:52
msgid ""
"Vector layer attributes and length of an edge can be used as the "
"properties of an edge."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:55
msgid ""
"Converting from a vector layer to the graph is done using the `Builder "
"<http://en.wikipedia.org/wiki/Builder_pattern>`_ programming pattern. A "
"graph is constructed using a so-called Director. There is only one "
"Director for now: `QgsLineVectorLayerDirector "
"<http://qgis.org/api/classQgsLineVectorLayerDirector.html>`_. The "
"director sets the basic settings that will be used to construct a graph "
"from a line vector layer, used by the builder to create the graph. "
"Currently, as in the case with the director, only one builder exists: "
"`QgsGraphBuilder <http://qgis.org/api/classQgsGraphBuilder.html>`_, that "
"creates `QgsGraph <http://qgis.org/api/classQgsGraph.html>`_ objects. You"
" may want to implement your own builders that will build a graphs "
"compatible with such libraries as `BGL "
"<http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or "
"`NetworkX <http://networkx.lanl.gov/>`_."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:66
msgid ""
"To calculate edge properties the programming pattern `strategy "
"<http://en.wikipedia.org/wiki/Strategy_pattern>`_ is used. For now only "
"`QgsDistanceArcProperter "
"<http://qgis.org/api/classQgsDistanceArcProperter.html>`_ strategy is "
"available, that takes into account the length of the route. You can "
"implement your own strategy that will use all necessary parameters. For "
"example, RoadGraph plugin uses a strategy that computes travel time using"
" edge length and speed value from attributes."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:73
msgid "It's time to dive into the process."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:75
msgid ""
"First of all, to use this library we should import the networkanalysis "
"module"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:81
msgid "Then some examples for creating a director"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:96
msgid ""
"To construct a director  we should pass a vector layer, that will be used"
" as the source for the graph structure and information about allowed "
"movement on each road segment (one-way or bidirectional movement, direct "
"or reverse direction). The call looks like this"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:109
msgid "And here is full list of what these parameters mean:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:111
msgid "``vl`` --- vector layer used to build the graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:112
msgid ""
"``directionFieldId`` --- index of the attribute table field, where "
"information about roads direction is stored. If ``-1``, then don't use "
"this info at all. An integer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:115
msgid ""
"``directDirectionValue`` --- field value for roads with direct direction "
"(moving from first line point to last one). A string."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:117
msgid ""
"``reverseDirectionValue`` --- field value for roads with reverse "
"direction (moving from last line point to first one). A string."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:119
msgid ""
"``bothDirectionValue`` --- field value for bidirectional roads (for such "
"roads we can move from first point to last and from last to first). A "
"string."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:121
msgid ""
"``defaultDirection`` --- default road direction. This value will be used "
"for those roads where field ``directionFieldId`` is not set or has some "
"value different from any of the three values specified above. An integer."
" ``1`` indicates direct direction, ``2`` indicates reverse direction, and"
" ``3`` indicates both directions."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:127
msgid "It is necessary then to create a strategy for calculating edge properties"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:133
msgid "And tell the director about this strategy"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:139
msgid ""
"Now we can use the builder, which will create the graph. The "
"QgsGraphBuilder class constructor takes several arguments:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:142
msgid "crs --- coordinate reference system to use. Mandatory argument."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:143
msgid ""
"otfEnabled --- use \"on the fly\" reprojection or no. By default "
"const:`True` (use OTF)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:145
msgid "topologyTolerance --- topological tolerance. Default value is 0."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:146
msgid "ellipsoidID --- ellipsoid to use. By default \"WGS84\"."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:153
msgid ""
"Also we can define several points, which will be used in the analysis. "
"For example"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:161
msgid ""
"Now all is in place so we can build the graph and \"tie\" these points to"
" it"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:167
msgid ""
"Building the graph can take some time (which depends on the number of "
"features in a layer and layer size). ``tiedPoints`` is a list with "
"coordinates of \"tied\" points. When the build operation is finished we "
"can get the graph and use it for the analysis"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:176
msgid "With the next code we can get the vertex indexes of our points"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:185
msgid "Graph analysis"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:187
msgid ""
"Networks analysis is used to find answers to two questions: which "
"vertexes are connected and how to find a shortest path. To solve these "
"problems the network analysis library provides Dijkstra's algorithm."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:191
msgid ""
"Dijkstra's algorithm finds the shortest route from one of the vertexes of"
" the graph to all the others and the values of the optimization "
"parameters. The results can be represented as a shortest path tree."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:195
msgid ""
"The shortest path tree is a directed weighted graph (or more precisely "
"--- tree) with the following properties:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:198
msgid "only one vertex has no incoming edges â the root of the tree"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:199
msgid "all other vertexes have only one incoming edge"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:200
msgid ""
"if vertex B is reachable from vertex A, then the path from A to B is the "
"single available path and it is optimal (shortest) on this graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:203
msgid ""
"To get the shortest path tree use the methods :func:`shortestTree` and "
":func:`dijkstra` of `QgsGraphAnalyzer "
"<http://qgis.org/api/classQgsGraphAnalyzer.html>`_ class. It is "
"recommended to use method :func:`dijkstra` because it works faster and "
"uses memory more efficiently."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:208
msgid ""
"The :func:`shortestTree` method is useful when you want to walk around "
"the shortest path tree. It always creates a new graph object (QgsGraph) "
"and accepts three variables:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:212
msgid "source --- input graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:213
msgid "startVertexIdx --- index of the point on the tree (the root of the tree)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:214
msgid "criterionNum --- number of edge property to use (started from 0)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:220
msgid ""
"The :func:`dijkstra` method has the same arguments, but returns two "
"arrays. In the first array element i contains index of the incoming edge "
"or -1 if there are no incoming edges. In the second array element i "
"contains distance from the root of the tree to vertex i or DOUBLE_MAX if "
"vertex i is unreachable from the root."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:230
msgid ""
"Here is some very simple code to display the shortest path tree using the"
" graph created with the :func:`shortestTree` method (select linestring "
"layer in TOC and replace coordinates with your own). **Warning**: use "
"this code only as an example, it creates a lots of `QgsRubberBand "
"<http://qgis.org/api/classQgsRubberBand.html>`_ objects and may be slow "
"on large data-sets."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:270
msgid "Same thing but using :func:`dijkstra` method"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:307
msgid "Finding shortest paths"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:309
msgid ""
"To find the optimal path between two points the following approach is "
"used. Both points (start A and end B) are \"tied\" to the graph when it "
"is built. Then using the methods :func:`shortestTree` or :func:`dijkstra`"
" we build the shortest path tree with root in the start point A. In the "
"same tree we also find the end point B and start to walk through the tree"
" from point B to point A. The whole algorithm can be written as"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:326
msgid ""
"At this point we have the path, in the form of the inverted list of "
"vertexes (vertexes are listed in reversed order from end point to start "
"point) that will be visited during traveling by this path."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:330
msgid ""
"Here is the sample code for QGIS Python Console (you will need to select "
"linestring layer in TOC and replace coordinates in the code with yours) "
"that uses method :func:`shortestTree`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:384
msgid "And here is the same sample but using :func:`dijkstra` method"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:434
msgid "Areas of availability"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:436
msgid ""
"The area of availability for vertex A is the subset of graph vertexes "
"that are accessible from vertex A and the cost of the paths from A to "
"these vertexes are not greater that some value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:440
msgid ""
"More clearly this can be shown with the following example: \"There is a "
"fire station. Which parts of city can a fire truck reach in 5 minutes? 10"
" minutes? 15 minutes?\". Answers to these questions are fire station's "
"areas of availability."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:445
msgid ""
"To find the areas of availability we can use method :func:`dijkstra` of "
"the :class:`QgsGraphAnalyzer` class. It is enough to compare the elements"
" of the cost array with a predefined value. If cost[i] is less than or "
"equal to a predefined value, then vertex i is inside the area of "
"availability, otherwise it is outside."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:451
msgid ""
"A more difficult problem is to get the borders of the area of "
"availability. The bottom border is the set of vertexes that are still "
"accessible, and the top border is the set of vertexes that are not "
"accessible. In fact this is simple: it is the availability border based "
"on the edges of the shortest path tree for which the source vertex of the"
" edge is accessible and the target vertex of the edge is not."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:458
msgid "Here is an example"
msgstr ""

