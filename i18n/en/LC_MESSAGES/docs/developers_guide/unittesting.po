# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-28 10:31+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../source/docs/developers_guide/unittesting.rst:8
msgid "Unit Testing"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:13
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement "
"to qgis_core, and we will extend this requirement to other parts of the "
"code base once people are familiar with the procedures for unit testing "
"explained in the sections that follow."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:21
msgid "The QGIS testing framework - an overview"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:23
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt "
"testing library) and CTest (a framework for compiling and running tests "
"as part of the CMake build process). Lets take an overview of the process"
" before I delve into the details:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:28
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written "
"yet when you start building your tests, and then as you implement your "
"code you can immediately validate each new functional part you add with "
"your test. In practive you will probably need to write tests for pre-"
"existing code in QGIS since we are starting with a testing framework well"
" after much application logic has already been implemented."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:36
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically "
"a client that creates an instance of a class and calls some methods on "
"that class. It will check the return from each method to make sure it "
"matches the expected value. If any one of the calls fails, the unit will "
"fail."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:42
msgid ""
"You include QtTestLib macros in your test class. This macro is processed "
"by the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:46
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will"
" build your test."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:49
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. "
"This will ensure your tests actually get compiled when you type make."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:52
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if "
"your test is data driven (e.g. needs to load a shapefile). These test "
"data should be as small as possible and wherever possible you should use "
"the existing datasets already there. Your tests should never modify this "
"data in situ, but rather may a temporary copy somewhere if needed."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:58
msgid ""
"You compile your sources and install. Do this using normal ``make && "
"(sudo)  make install`` procedure."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:61
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though I will explain other aproaches "
"that offer more fine grained control over running tests."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:66
msgid ""
"Right with that overview in mind, I will delve into a bit of detail. I've"
" already done much of the configuration for you in CMake and other places"
" in the source tree so all you need to do are the easy bits - writing "
"unit tests!"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:72
msgid "Creating a unit test"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:74
msgid ""
"Creating a unit test is easy - typically you will do this by just "
"creating a single .cpp file (not .h file is used) and implement all your "
"test methods as public methods that return void. I'll use a simple test "
"class for QgsRasterLayer throughout the section that follows to "
"illustrate. By convention we will name our test with the same name as the"
" class they are testing but prefixed with 'Test'. So our test "
"implementation goes in a file called testqgsrasterlayer.cpp and the class"
" itself will be TestQgsRasterLayer. First we add our standard copyright "
"banner:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:100
msgid ""
"Next we use start our includes needed for the tests we plan to run. There"
" is one special include all tests should have:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:107
msgid ""
"Beyond that you just continue implementing your class as per normal, "
"pulling in whatever headers you may need:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:125
msgid ""
"Since we are combining both class declaration and implementation in a "
"single file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in"
" the generated Doxygen documentation. After that comes a short "
"description of the unit test and the class must inherit from QObject and "
"include the Q_OBJECT macro."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:142
msgid ""
"All our test methods are implemented as private slots. The QtTest "
"framework will sequentially call each private slot method in the test "
"class. There are four 'special' methods which if implemented will be "
"called at the start of the unit test (initTestCase), at the end of the "
"unit test (cleanupTestCase). Before each test method is called, the "
"init() method will be called and after each test method is called the "
"cleanup() method is called. These methods are handy in that they allow "
"you to allocate and cleanup resources prior to running each test, and the"
" test unit as a whole."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:163
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. I"
" am implementing two methods here which illustrates two types of testing."
" In the first case I want to generally test the various parts of the "
"class are working, I can use a functional testing approach. Once again, "
"extreme programmers would advocate writing these tests before "
"implementing the class. Then as you work your way through your class "
"implementation you iteratively run your unit tests. More and more test "
"functions should complete sucessfully as your class implementation work "
"progresses, and when the whole unit test passes, your new class is done "
"and is now complete with a repeatable way to validate it."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:174
msgid ""
"Typically your unit tests would only cover the public API of your class, "
"and normally you do not need to write tests for accessors and mutators. "
"If it should happen that an acccessor or mutator is not working as "
"expected you would normally implement a regression test to check for this"
" (see lower down)."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:190
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example "
"I recently received a report by email that the cell count by rasters was "
"off by 1, throwing off all the statistics for the raster bands. I opened "
"a bug (ticket #832) and then created a regression test that replicated "
"the bug using a small test dataset (a 10x10 raster). Then I ran the test "
"and ran it, verifying that it did indeed fail (the cell count was 99 "
"instead of 100). Then I went to fix the bug and reran the unit test and "
"the regression test passed. I committed the regression test along with "
"the bug fix. Now if anybody breakes this in the source code again in the "
"future, we can immediatly identify that the code has regressed. Better "
"yet before committing any changes in the future, running our tests will "
"ensure our changes don't have unexpected side effects - like breaking "
"existing functionality."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:204
msgid ""
"There is one more benefit to regression tests - they can save you time. "
"If you ever fixed a bug that involved making changes to the source, and "
"then running the application and performing a series of convoluted steps "
"to replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:211
msgid ""
"To implement your regression test, you should follow the naming "
"convention of regression<TicketID> for your test functions. If no redmine"
" ticket exists for the regression, you should create one first. Using "
"this approach allows the person running a failed regression test easily "
"go and find out more information."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:230
msgid ""
"Finally in our test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case I will "
"declare a QgsRasterLayer * which can be used by any of our test methods. "
"The raster layer will be created in the initTestCase() function which is "
"run before any other tests, and then destroyed using cleanupTestCase() "
"which is run after all tests. By declaring helper methods (which may be "
"called by various test functions) privately, you can ensure that they "
"wont be automatically run by the QTest executable that is created when we"
" compile our test."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:247
msgid ""
"That ends our class declaration. The implementation is simply inlined in "
"the same file lower down. First our init and cleanup functions:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:280
msgid "The above init function illustrates a couple of interesting things."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:282
msgid ""
"I needed to manually set the QGIS application data path so that resources"
" such as srs.db can be found properly."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:284
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the ``tenbytenraster.asc`` file. This was achieved by "
"using the compiler define ``TEST_DATA_PATH``. The define is created in "
"the ``CMakeLists.txt`` configuration file under ``<QGIS Source "
"Root>/tests/CMakeLists.txt`` and is available to all QGIS unit tests. If "
"you need test data for your test, commit it under ``<QGIS Source "
"Root>/tests/testdata``. You should only commit very small datasets here. "
"If your test needs to modify the test data, it should make a copy of it "
"first."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:294
msgid ""
"Qt also provides some other interesting mechanisms for data driven "
"testing, so if you are interested to know more on the topic, consult the "
"Qt documentation."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:298
msgid ""
"Next lets look at our functional test. The isValid() test simply checks "
"the raster layer was correctly loaded in the initTestCase. QVERIFY is a "
"Qt macro that you can use to evaluate a test condition. There are a few "
"other use macros Qt provide for use in your tests including:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:303
msgid "`QCOMPARE ( actual, expected )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:304
msgid "`QEXPECT_FAIL ( dataIndex, comment, mode )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:305
msgid "`QFAIL ( message )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:306
msgid "`QFETCH ( type, name )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:307
msgid "`QSKIP ( description, mode )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:308
msgid "`QTEST ( actual, testElement )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:309
msgid "`QTEST_APPLESS_MAIN ( TestClass )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:310
msgid "`QTEST_MAIN ( TestClass )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:311
msgid "`QTEST_NOOP_MAIN ()`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:312
msgid "`QVERIFY2 ( condition, message )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:313
msgid "`QVERIFY ( condition )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:314
msgid "`QWARN ( message )`"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:316
msgid ""
"Some of these macros are useful only when using the Qt framework for data"
" driven testing (see the Qt docs for more detail)."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:326
msgid ""
"Normally your functional tests would cover all the range of functionality"
" of your classes public API where feasible. With our functional tests out"
" the way, we can look at our regression test example."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:330
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test"
" is simply a matter of using QVERIFY to check that the cell count meets "
"the expected value:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:345
msgid ""
"With all the unit test functions implemented, there one final thing we "
"need to add to our test class:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:353
msgid ""
"The purpose of these two lines is to signal to Qt's moc that his is a "
"QtTest (it will generate a main method that in turn calls each test "
"funtion.The last line is the include for the MOC generated sources. You "
"should replace 'testqgsrasterlayer' with the name of your class in lower "
"case."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:359
msgid "Comparing images for rendering tests"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:361
msgid ""
"Rendering images on different environments can produce subtle differences"
" due to platform-specific implementations (e.g. different font rendering "
"and antialiasing algorithms), to the fonts available on the system and "
"for other obscure reasons."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:364
msgid ""
"When a rendering test runs on Travis and fails, look for the dash link at"
" the very bottom of the Travis log. This link will take you to a cdash "
"page where you can see the rendered vs expected images, along with a "
"\"difference\" image which highlights in red any pixels which did not "
"match the reference image."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:366
msgid ""
"The QGIS unit test system has support for adding \"mask\" images, which "
"are used to indicate when a rendered image may differ from the reference "
"image. A mask image is an image (with the same name as the reference "
"image, but including a \"_mask.png\" suffix), and should be the same "
"dimensions as the reference image. In a mask image the pixel values "
"indicate how much that individual pixel can differ from the reference "
"image, so a black pixel indicates that the pixel in the rendered image "
"must exactly match the same pixel in the reference image. A pixel with "
"RGB 2, 2, 2 means that the rendered image can vary by up to 2 in its RGB "
"values from the reference image, and a fully white pixel (255, 255, 255) "
"means that the pixel is effectively ignored when comparing the reference "
"and rendered images."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:368
msgid ""
"A utility script to generate mask images is available as "
"``scripts/generate_test_mask_image.py``. This script is used by passing "
"it the path of a reference image (e.g. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" and the path to your rendered image."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:370
msgid "E.g."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:376
msgid ""
"You can shortcut the path to the reference image by passing a partial "
"part of the test name instead, e.g."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:382
msgid ""
"(This shortcut only works if a single matching reference image is found. "
"If multiple matches are found you will need to provide the full path to "
"the reference image.)"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:384
msgid ""
"The script also accepts http urls for the rendered image, so you can "
"directly copy a rendered image url from the cdash results page and pass "
"it to the script."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:386
msgid ""
"Be careful when generating mask images - you should always view the "
"generated mask image and review any white areas in the image. Since these"
" pixels are ignored, make sure that these white images do not cover any "
"important portions of the reference image -- otherwise your unit test "
"will be meaningless!"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:388
msgid ""
"Similarly, you can manually \"white out\" portions of the mask if you "
"deliberately want to exclude them from the test. This can be useful e.g. "
"for tests which mix symbol and text rendering (such as legend tests), "
"where the unit test is not designed to test the rendered text and you "
"don't want the test to be subject to cross-platform text rendering "
"differences."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:390
msgid ""
"To compare images in QGIS unit tests you should use the class "
"``QgsMultiRenderChecker`` or one of its subclasses."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:392
msgid "To improve tests robustness here are few tips:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:394
msgid ""
"Disable antialiasing if you can, as this minimizes cross-platform "
"rendering differences."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:395
msgid ""
"Make sure your reference images are \"chunky\"... i.e. don't have 1 px "
"wide lines or other fine features, and use large, bold fonts (14 points "
"or more is recommended)."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:396
msgid ""
"Sometimes tests generate slightly different sized images (e.g. legend "
"rendering tests, where the image size is dependent on font rendering size"
" - which is subject to cross-platform differences). To account for this, "
"use ``QgsMultiRenderChecker::setSizeTolerance()`` and specify the maximum"
" number of pixels that the rendered image width and height differ from "
"the reference image."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:397
msgid ""
"Don't use transparent backgrounds in reference images (CDash does not "
"support them). Instead, use ``QgsMultiRenderChecker::drawBackground()`` "
"to draw a checkboard pattern for the reference image background."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:398
msgid ""
"When fonts are required, use the font specified in "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:402
msgid "Adding your unit test to CMakeLists.txt"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:405
msgid ""
"Adding your unit test to the build system is simply a matter of editing "
"the CMakeLists.txt in the test directory, cloning one of the existing "
"test blocks, and then replacing your test class name into it. For "
"example:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:416
msgid "The ADD_QGIS_TEST macro explained"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:419
msgid ""
"I'll run through these lines briefly to explain what they do, but if you "
"are not interested, just do the step explained in the above section and "
"section."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:454
msgid ""
"Lets look a little more in detail at the individual lines. First we "
"define the list of sources for our test. Since we have only one source "
"file (following the methodology I described above where class declaration"
" and definition are in the same file) its a simple statement:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:463
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:472
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation I included the moc outputs directly into our test class, "
"so that will give it (among other things) a main method so the class can "
"be compiled as an executable:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:483
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but I "
"will be working to replace that with the specific Qt libraries that each "
"class needs only. Of course you also need to link to the relevant qgis "
"libraries as required by your unit test."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:493
msgid ""
"Next I tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something I plan to remove in the future so that"
" the tests can run directly from inside the source tree."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:520
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / "
"ctest. Here is where the best magic happens - we register the class with "
"ctest. If you recall in the overview I gave in the beginning of this "
"section, we are using both QtTest and CTest together. To recap, QtTest "
"adds a main method to your test unit and handles calling your test "
"methods within the class. It also provides some macros like ``QVERIFY`` "
"that you can use as to test for failure of the tests using conditions. "
"The output from a QtTest unit test is an executable which you can run "
"from the command line. However when you have a suite of tests and you "
"want to run each executable in turn, and better yet integrate running "
"tests into the build process, the CTest is what we use."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:533
msgid "Building your unit test"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:535
msgid ""
"To build the unit test you need only to make sure that "
"``ENABLE_TESTS=true`` in the cmake configuration. There are two ways to "
"do this:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:538
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively"
" set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:540
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:542
msgid ""
"Other than that, just build QGIS as per normal and the tests should build"
" too."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:546
msgid "Run your tests"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:549
msgid "The simplest way to run the tests is as part of your normal build process:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:555
msgid ""
"The make test command will invoke CTest which will run each test that was"
" registered using the ADD_TEST CMake directive described above. Typical "
"output from make test will look like this:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:575
msgid ""
"If a test fails, you can use the ctest command to examine more closely "
"why it failed. Use the ``-R`` option to specify a regex for which tests "
"you want to run and ``-V`` to get verbose output:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:620
msgid "Debugging unit tests"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:622
msgid ""
"For C++ unit tests, QtCreator automatically adds run targets, so you can "
"start them in the debugger."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:625
msgid ""
"It's also possible to start Python unit tests from QtCreator with GDB. "
"For this, you need to go to ``Projects`` and choose ``Run`` under ``Build"
" & Run``. Then add a new ``Run configuration`` with the executable "
"``/usr/bin/python3`` and the Command line arguments set to the path of "
"the unit test python file, e.g. "
"``/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py``."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:632
msgid "Now also change the ``Run Environment`` and add 3 new variables:"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:635
msgid "Variable"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:635
msgid "Value"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:637
msgid "PYTHONPATH"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:637
msgid "[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:639
msgid "QGIS_PREFIX_PATH"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:639
msgid "[build]/output"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:641
msgid "LD_LIBRARY_PATH"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:641
msgid "[build]/output/lib"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:644
msgid ""
"Replace ``[build]`` with your build directory and ``[source]`` with your "
"source directory."
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:648
msgid "Have fun"
msgstr ""

#: ../../source/docs/developers_guide/unittesting.rst:650
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope "
"you will get into the habit of writing test to test new functionality and"
" to check for regressions. Some aspects of the test system (in particular"
" the CMakeLists.txt parts) are still being worked on so that the testing "
"framework works in a truly platform independent way."
msgstr ""

